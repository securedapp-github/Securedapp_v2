"use client";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import Navbar from "../../components/navbar/Navbar";
import Footer from "../../components/footer/footer";
import {
  faChevronLeft,
  faChevronRight,
  faSearch,
} from "@fortawesome/free-solid-svg-icons";
import { vulnerabilityData } from "./vulnerability.data";
import { useState } from "react";
import Image from "next/image";
import MetaTags from "../../components/common/MetaTags";

const severityTypes = [
  {
    name: "Critical",
    color: "#ff6666",
    text: "#fff",
  },
  {
    name: "Medium",
    color: "#ffa366",
    text: "#fff",
  },
  {
    name: "Low",
    color: "#ffff33",
    text: "#000",
  },
  {
    name: "Informational",
    color: "#b3b3b3",
    text: "#fff",
  },
  {
    name: "Optimization",
    color: "#d98cb3",
    text: "#fff",
  },
];

const itemsPerPage = 10;

const VulnerabilityInfo = () => {
  if (typeof window !== "undefined") {
    typeof window !== "undefined" && window.scrollTo(0, 0);
  }

  const [currentPage, setCurrentPage] = useState(1);
  const [selectedSeverityType, setSelectedSeverityType] = useState("");
  const [searchQuery, setSearchQuery] = useState("");

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;

  const filteredItems = vulnerabilityData.filter(
    (vulType) =>
      (vulType.Impact === selectedSeverityType ||
        selectedSeverityType === "") &&
      (vulType.Detector.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vulType["What it Detects"]
          .toLowerCase()
          .includes(searchQuery.toLowerCase()) ||
        vulType.Impact.toLowerCase().includes(
          searchQuery.toLocaleLowerCase()
        ) ||
        vulType.Confidence.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  const currentItems = filteredItems.slice(indexOfFirstItem, indexOfLastItem);

  const totalPages = Math.ceil(vulnerabilityData.length / itemsPerPage);

  const handlePreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handleSelectedSeverityType = (severityType) => {
    if (severityType === selectedSeverityType) setSelectedSeverityType("");
    else setSelectedSeverityType(severityType);
    setCurrentPage(1);
  };

  const handleSearchChange = (event) => {
    setSearchQuery(event.target.value);
    setCurrentPage(1);
  };

  return (
    <div className="vulnerability-info-container">
      <MetaTags
        data={{
          title:
            "Smart contract vulnerabilities by SecureDApps's Solidity Shiled",
          desc: "Solidity Shield protects your smart contracts from attacks with comprehensive vulnerability detection. Ensure code security & prevent exploits.",
          keywords:
            "smart contract auditing, Solidity Shield, smart contract security, vulnerability detection, Solidity vulnerabilities, smart contract testing, code security",
        }}
      />
      <Navbar />
      <div className="vulnerability-info">
        <div className="vulnerability-info-header">
          <div className="vulnerability-info-header-text">
            Solidity Shield provides comprehensive vulnerability detection,
            ensuring your smart contracts are protected from a wide range of
            threats.
          </div>
          <div className="vulnerability-info-search">
            <input
              className="vulnerability-info-search-input-box"
              placeholder="Search..."
              onChange={handleSearchChange}
              type="text"
              value={searchQuery}
            />
            <div className="vulnerability-info-search-input-icon">
              <FontAwesomeIcon className="" icon={faSearch} />
            </div>
          </div>
        </div>
        <div className="vulnerability-info-body">
          <div className="vulnerability-info-body-left">
            <div className="vulnerability-info-body-left-title">Severity</div>
            <div className="vulnerability-info-body-left-items">
              {severityTypes.map((severity) => {
                return (
                  <div
                    onClick={() => handleSelectedSeverityType(severity.name)}
                    className={`vulnerability-info-body-left-item ${
                      severity.name === selectedSeverityType &&
                      "vulnerability-info-body-left-item-selected"
                    }`}
                  >
                    {severity.name}
                  </div>
                );
              })}
            </div>
          </div>
          <div className="vulnerability-info-body-right">
            <div className="vulnerability-info-body-right-table-container">
              <div className="vulnerability-info-body-right-table-scrollable">
                <div className="vulnerability-info-body-right-table">
                  <div className="vulnerability-info-body-right-table-headers">
                    <div className="vulnerability-info-body-right-table-detector-container">
                      <div className="vulnerability-info-body-right-table-header">
                        Detector
                      </div>
                    </div>
                    <div className="vulnerability-info-body-right-table-detects-container">
                      <div className="vulnerability-info-body-right-table-header">
                        What it Detects
                      </div>
                    </div>
                    <div className="vulnerability-info-body-right-table-confidence-container">
                      <div className="vulnerability-info-body-right-table-header">
                        Confidence
                      </div>
                    </div>
                    <div className="vulnerability-info-body-right-table-impact-container">
                      <div className="vulnerability-info-body-right-table-header">
                        Impact
                      </div>
                    </div>
                  </div>
                  <div className="vulnerability-info-body-right-table-body">
                    {currentItems.map((vul) => {
                      return (
                        <div className="vulnerability-info-body-right-table-body-row">
                          <div className="vulnerability-info-body-right-table-detector-container">
                            <div className="vulnerability-info-body-right-table-item">
                              {vul.Detector}
                            </div>
                          </div>
                          <div className="vulnerability-info-body-right-table-detects-container">
                            <div className="vulnerability-info-body-right-table-item">
                              {vul["What it Detects"]}
                            </div>
                          </div>
                          <div className="vulnerability-info-body-right-table-confidence-container">
                            <div className="vulnerability-info-body-right-table-item">
                              {vul.Confidence}
                            </div>
                          </div>
                          <div className="vulnerability-info-body-right-table-impact-container flex items-center justify-center">
                            <div
                              style={{
                                backgroundColor: severityTypes.filter(
                                  (severity) => severity.name === vul.Impact
                                )[0].color,
                                color: severityTypes.filter(
                                  (severity) => severity.name === vul.Impact
                                )[0].text,
                              }}
                              className={`vulnerability-info-body-right-table-item vulnerability-info-body-right-table-item-impact`}
                            >
                              {vul.Impact}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            </div>
            <div className="vulnerability-info-body-pagination">
              <div
                className="vulnerability-info-body-pagination-button-container"
                onClick={handlePreviousPage}
                style={{
                  cursor: currentPage === 1 ? "not-allowed" : "pointer",
                }}
              >
                <FontAwesomeIcon className="" icon={faChevronLeft} />
              </div>
              <div className="vulnerability-info-body-pagination-number-container">
                {currentPage}
              </div>
              <div
                className="vulnerability-info-body-pagination-button-container"
                onClick={handleNextPage}
                style={{
                  cursor:
                    currentPage === totalPages ? "not-allowed" : "pointer",
                }}
              >
                <FontAwesomeIcon className="" icon={faChevronRight} />
              </div>
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default VulnerabilityInfo;
